--- src/main/java/com/godiddy/api/client/openapi/model/SecretVerificationMethodInner.java	2024-04-12 22:06:37.032432554 +0200
+++ src/main/java/com/godiddy/api/client/openapi/model/SecretVerificationMethodInner.java.changed	2024-04-12 22:07:30.372509161 +0200
@@ -39,7 +39,7 @@
 import java.io.IOException;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.ArrayList;
+import java.util.List;
 import java.util.Collections;
 import java.util.HashSet;
 
@@ -95,30 +95,30 @@
             boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
             int match = 0;
             JsonToken token = tree.traverse(jp.getCodec()).nextToken();
-            // deserialize List<@Valid VerificationMethodTemplate>
+            // deserialize List
             try {
                 boolean attemptParsing = true;
                 // ensure that we respect type coercion as set on the client ObjectMapper
-                if (List<@Valid VerificationMethodTemplate>.class.equals(Integer.class) || List<@Valid VerificationMethodTemplate>.class.equals(Long.class) || List<@Valid VerificationMethodTemplate>.class.equals(Float.class) || List<@Valid VerificationMethodTemplate>.class.equals(Double.class) || List<@Valid VerificationMethodTemplate>.class.equals(Boolean.class) || List<@Valid VerificationMethodTemplate>.class.equals(String.class)) {
+                if (List.class.equals(Integer.class) || List.class.equals(Long.class) || List.class.equals(Float.class) || List.class.equals(Double.class) || List.class.equals(Boolean.class) || List.class.equals(String.class)) {
                     attemptParsing = typeCoercion;
                     if (!attemptParsing) {
-                        attemptParsing |= ((List<@Valid VerificationMethodTemplate>.class.equals(Integer.class) || List<@Valid VerificationMethodTemplate>.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
-                        attemptParsing |= ((List<@Valid VerificationMethodTemplate>.class.equals(Float.class) || List<@Valid VerificationMethodTemplate>.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
-                        attemptParsing |= (List<@Valid VerificationMethodTemplate>.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
-                        attemptParsing |= (List<@Valid VerificationMethodTemplate>.class.equals(String.class) && token == JsonToken.VALUE_STRING);
+                        attemptParsing |= ((List.class.equals(Integer.class) || List.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
+                        attemptParsing |= ((List.class.equals(Float.class) || List.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
+                        attemptParsing |= (List.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
+                        attemptParsing |= (List.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                     }
                 }
                 if (attemptParsing) {
-                    deserialized = tree.traverse(jp.getCodec()).readValueAs(List<@Valid VerificationMethodTemplate>.class);
+                    deserialized = tree.traverse(jp.getCodec()).readValueAs(List.class);
                     // TODO: there is no validation against JSON schema constraints
                     // (min, max, enum, pattern...), this does not perform a strict JSON
                     // validation, which means the 'match' count may be higher than it should be.
                     match++;
-                    log.log(Level.FINER, "Input data matches schema 'List<@Valid VerificationMethodTemplate>'");
+                    log.log(Level.FINER, "Input data matches schema 'List'");
                 }
             } catch (Exception e) {
                 // deserialization failed, continue
-                log.log(Level.FINER, "Input data does not match schema 'List<@Valid VerificationMethodTemplate>'", e);
+                log.log(Level.FINER, "Input data does not match schema 'List'", e);
             }
 
             // deserialize VerificationMethodPrivateData
@@ -197,7 +197,7 @@
         super("oneOf", Boolean.FALSE);
     }
 
-    public SecretVerificationMethodInner(List<@Valid VerificationMethodTemplate> o) {
+    public SecretVerificationMethodInner(List<Map<String, Object>> o) {
         super("oneOf", Boolean.FALSE);
         setActualInstance(o);
     }
@@ -213,7 +213,7 @@
     }
 
     static {
-        schemas.put("List<@Valid VerificationMethodTemplate>", List<@Valid VerificationMethodTemplate>.class);
+        schemas.put("List", List.class);
         schemas.put("VerificationMethodPrivateData", VerificationMethodPrivateData.class);
         schemas.put("VerificationMethodPublicData", VerificationMethodPublicData.class);
         JSON.registerDescendants(SecretVerificationMethodInner.class, Collections.unmodifiableMap(schemas));
@@ -227,14 +227,14 @@
     /**
      * Set the instance that matches the oneOf child schema, check
      * the instance parameter is valid against the oneOf child schemas:
-     * List<@Valid VerificationMethodTemplate>, VerificationMethodPrivateData, VerificationMethodPublicData
+     * List, VerificationMethodPrivateData, VerificationMethodPublicData
      *
      * It could be an instance of the 'oneOf' schemas.
      * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
      */
     @Override
     public void setActualInstance(Object instance) {
-        if (JSON.isInstanceOf(List<@Valid VerificationMethodTemplate>.class, instance, new HashSet<Class<?>>())) {
+        if (JSON.isInstanceOf(List.class, instance, new HashSet<Class<?>>())) {
             super.setActualInstance(instance);
             return;
         }
@@ -249,14 +249,14 @@
             return;
         }
 
-        throw new RuntimeException("Invalid instance type. Must be List<@Valid VerificationMethodTemplate>, VerificationMethodPrivateData, VerificationMethodPublicData");
+        throw new RuntimeException("Invalid instance type. Must be List, VerificationMethodPrivateData, VerificationMethodPublicData");
     }
 
     /**
      * Get the actual instance, which can be the following:
-     * List<@Valid VerificationMethodTemplate>, VerificationMethodPrivateData, VerificationMethodPublicData
+     * List, VerificationMethodPrivateData, VerificationMethodPublicData
      *
-     * @return The actual instance (List<@Valid VerificationMethodTemplate>, VerificationMethodPrivateData, VerificationMethodPublicData)
+     * @return The actual instance (List, VerificationMethodPrivateData, VerificationMethodPublicData)
      */
     @Override
     public Object getActualInstance() {
@@ -264,14 +264,14 @@
     }
 
     /**
-     * Get the actual instance of `List<@Valid VerificationMethodTemplate>`. If the actual instance is not `List<@Valid VerificationMethodTemplate>`,
+     * Get the actual instance of `List`. If the actual instance is not `List`,
      * the ClassCastException will be thrown.
      *
-     * @return The actual instance of `List<@Valid VerificationMethodTemplate>`
-     * @throws ClassCastException if the instance is not `List<@Valid VerificationMethodTemplate>`
+     * @return The actual instance of `List`
+     * @throws ClassCastException if the instance is not `List`
      */
-    public List<@Valid VerificationMethodTemplate> getList<@Valid VerificationMethodTemplate>() throws ClassCastException {
-        return (List<@Valid VerificationMethodTemplate>)super.getActualInstance();
+    public List<Map<String, Object>> getList() throws ClassCastException {
+        return (List<Map<String, Object>>)super.getActualInstance();
     }
 
     /**
@@ -342,13 +342,12 @@
         }
         return joiner.toString();
     }
-    if (getActualInstance() instanceof List<@Valid VerificationMethodTemplate>) {
+    if (getActualInstance() instanceof List) {
         if (getActualInstance() != null) {
-          for (int i = 0; i < ((List<@Valid VerificationMethodTemplate>)getActualInstance()).size(); i++) {
-            if (((List<@Valid VerificationMethodTemplate>)getActualInstance()).get(i) != null) {
-              joiner.add(((VerificationMethodTemplate)getActualInstance()).get(i).toUrlQueryString(String.format("%sone_of_2%s%s", prefix, suffix,
-              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
-            }
+          for (int i = 0; i < ((List<Map<String, Object>>)getActualInstance()).size(); i++) {
+            joiner.add(String.format("%sone_of_2%s%s=%s", prefix, suffix,
+                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
+                URLEncoder.encode(String.valueOf(((List<Map<String, Object>>)getActualInstance()).get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
           }
         }
         return joiner.toString();
