name: Latest deb Package

on:
  workflow_call:
    inputs:
      JAVA_VERSION:
        required: false
        type: string
        default: '21'
        description: 'Java version to use for build'
    secrets:
      VAULT_ADDR:
        required: true
      CI_SECRET_READER_PERIODIC_TOKEN:
        required: true
      VAULTCA:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get all history for git operations

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.JAVA_VERSION }}

      # Replace date-based versioning with Git-based versioning
      - name: Get Git short commit hash
        id: git_hash
        run: echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract version from pom.xml
        run: |
          VERSION=$(grep -m 1 "<version>" pom.xml | sed -e 's/<version>\(.*\)<\/version>/\1/' -e 's/[[:space:]]//g')
          echo "SNAPSHOT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Project version extracted: $SNAPSHOT_VERSION"

      - name: Fetch Vault Secrets
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.CI_SECRET_READER_PERIODIC_TOKEN }}
          caCertificate: ${{ secrets.VAULTCA }}
          secrets: |
            ci/data/gh-workflows/maven-danubetech-nexus username | MAVEN_USERNAME ;
            ci/data/gh-workflows/maven-danubetech-nexus password | MAVEN_PASSWORD

      - name: Configure Maven Settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings>
            <servers>
              <server>
                <id>danubetech-maven-snapshots</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
              <server>
                <id>danubetech-maven-releases</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
              <server>
                <id>danubetech-maven-internal</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
              <server>
                <id>danubetech-maven-internal-releases</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
              <server>
                <id>danubetech-maven-internal-snapshots</id>
                <username>${{ env.MAVEN_USERNAME }}</username>
                <password>${{ env.MAVEN_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Build with Maven
        run: mvn clean package

      - name: Install required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot

      - name: Make packaging script executable
        run: chmod +x ./godiddy-cli-package.sh

      - name: Package using bash script
        run: ./godiddy-cli-package.sh --version ${{ env.SNAPSHOT_VERSION }} --java-version ${{ inputs.JAVA_VERSION }}

      - name: Delete existing latest release
        run: |
          gh release delete latest --cleanup-tag --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update latest tag
        run: |
          git tag -f latest
          git push origin latest -f

      - name: Create/Update Latest Release
        run: |
          # Create release notes with git commit info
          echo "This is the latest build from the main branch." > release_notes.md
          echo "Git commit: $(git rev-parse HEAD)" >> release_notes.md
          echo "Commit date: $(git log -1 --format=%cd --date=format:'%Y-%m-%d %H:%M:%S')" >> release_notes.md
          echo "" >> release_notes.md
          echo "⚠️ This is an unstable development build and may contain bugs." >> release_notes.md
          
          # Create the release with GitHub CLI
          gh release create latest \
            --title "Latest Build (git-${{ env.GIT_HASH }})" \
            --notes-file release_notes.md \
            --prerelease \
            ./build/output/godiddy-cli_${{ env.SNAPSHOT_VERSION }}_amd64.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}