openapi: 3.1.0
info:
  version: 1.0.0
  title: API Reference
  contact:
    email: contact@danubetech.com
servers:
  - url: /1.0.0
security:
  - bearerAuth: []
tags:
  - name: Universal Resolver
  - name: Universal Registrar
  - name: Universal Issuer
  - name: Universal Verifier
  - name: Wallet Service - DIDs and Keys
  - name: Wallet Service - Credentials
  - name: Version Service
  - name: Revocation Service
paths:
  /universal-resolver/identifiers/{identifier}:
    get:
      summary: Resolve a DID / Dereference a DID URL
      description: <p>This endpoint either resolves a DID, or dereferences a DID URL.
        When resolving a DID, it takes the DID and resolution options as inputs, and
        the output is a DID document plus metadata. When dereferencing a DID URL,
        it takes the DID URL and dereferencing options as inputs, and the output is
        a DID document, a part of a DID document, or some other resource identified
        by the DID URL.</p> <p>See the <a href="<a href="https://www.w3.org/TR/did-resolution/">DID
        Resolution</a> specification for additional details.</p>
      operationId: resolve
      tags:
        - Universal Resolver
      parameters:
        - in: path
          required: true
          name: identifier
          schema:
            type: string
          description: The DID to be resolved, or the DID URL to be dereferenced.
          examples:
            example1:
              value: did:indy:sovrin:builder:VbPQNHsvoLZdaNU7fTBeFx
              description: A DID using the `indy` method.
            example2:
              value: did:ion:EiClkZMDxPKqC9c-umQfTkR8vvZ9JPhl_xLDI9Nfk38w5w
              description: A DID using the `ion` method.
            example3:
              value: did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc
              description: A DID using the `ebsi` method.
        - in: header
          required: false
          name: Accept
          schema:
            type: string
          description: The requested media type of the DID document representation
            or DID resolution result.
          examples:
            application/did:
              value: application/did
              description: Media type of a DID document.
            application/did-resolution:
              value: application/did-resolution
              description: Media type of a DID resolution result.
            application/did-url-dereferencing:
              value: application/did-url-dereferencing
              description: Media type of a DID URL dereferencing result.
        - in: query
          name: options
          schema:
            oneOf:
              - $ref: '#/components/schemas/ResolutionOptions'
              - $ref: '#/components/schemas/DereferencingOptions'
          description: The options for resolving the DID or dereferencing the DID
            URL.
          style: form
          explode: true
      responses:
        '200':
          description: successfully resolved!
          content:
            application/did:
              schema:
                type: object
                description: The DID document.
                example:
                  '@context': https://www.w3.org/ns/did/v1.1
                  id: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
                  verificationMethod:
                    - id: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#key-1
                      type: Ed25519VerificationKey2018
                      publicKeyBase58: H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV
            application/did-resolution:
              schema:
                $ref: '#/components/schemas/ResolutionResult'
            application/did-url-dereferencing:
              schema:
                $ref: '#/components/schemas/DereferencingResult'
        '400':
          description: Invalid DID or DID URL.
        '404':
          description: DID or DID URL not found.
        '406':
          description: Representation not supported.
        '410':
          description: Successfully resolved, but DID is deactivated.
          content:
            application/did:
              schema:
                type: object
                description: The deactivated DID document.
            application/did-resolution:
              schema:
                $ref: '#/components/schemas/ResolutionResult'
            application/did-url-dereferencing:
              schema:
                $ref: '#/components/schemas/DereferencingResult'
        '500':
          description: Internal Error.
        '501':
          description: DID method not supported.
  /universal-resolver/properties:
    get:
      summary: Return a map of configuration properties
      description: <p>This endpoint returns a map of the configuration properties
        of the DID Resolver, including of its drivers.</p>
      operationId: universalResolverGetProperties
      tags:
        - Universal Resolver
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: object
                description: A map of properties.
                example:
                  indy:
                    libIndyPath: /lib
                    poolConfigs: '...'
  /universal-resolver/methods:
    get:
      summary: Return a list of supported DID methods
      description: <p>This endpoint returns a list of DID methods supported by the
        DID Resolver.</p>
      operationId: universalResolverGetMethods
      tags:
        - Universal Resolver
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: array
                items:
                  type: string
                description: The list of supported DID methods.
                example:
                  - btcr
                  - indy
                  - v1
                  - key
  /universal-resolver/testIdentifiers:
    get:
      summary: Return a map of test identifiers
      description: <p>This endpoint returns a map of test identifiers, grouped by
        DID method.</p>
      operationId: universalResolverGetTestIdentifiers
      tags:
        - Universal Resolver
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: object
                description: A map of test identifiers, grouped by DID method.
                example:
                  btcr:
                    - did:btcr:xz35-jznz-q9yu-ply
                    - did:btcr:xkrn-xz7q-qsye-28p
                  indy:
                    - did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
  /universal-resolver/traits:
    get:
      summary: Return a map of DID traits
      description: <p>This endpoint returns a map of the DID traits of the DID methods
        supported by the DID Resolver.</p>
      operationId: universalResolverGetTraits
      tags:
        - Universal Resolver
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: object
                description: A map of DID traits.
                example:
                  indy:
                    updatable: true
                    deactivatable: true
                    enumerable: true
                    historyAvailable: true
                    humanReadable: false
  /universal-registrar/create:
    post:
      summary: Create a DID
      description: <p>This endpoint creates a DID. As input it takes the DID, a DID
        document, plus optional DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to create a DID. The output is a state object that represents the current
        state of the DID creation process.</p> <p>See the <a href="https://identity.foundation/did-registration/#create">DID
        Registration</a> specification for additional details.</p>
      operationId: create
      tags:
        - Universal Registrar
      parameters:
        - in: query
          required: true
          name: method
          schema:
            type: string
          description: The requested DID method for the operation.
          example: key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
      responses:
        '200':
          description: The request was successful, but the DID may not be fully created
            yet, as indicated by the "didState.state" and "jobId" output fields. Additional
            state information plus metadata are available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateState'
        '201':
          description: The DID has been successfully created, as indicated by the
            "didState.state" output field. Additional state information (including
            the created DID) plus metadata are available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateState'
  /universal-registrar/update:
    post:
      summary: Update a DID
      description: <p>This endpoint updates a DID. As input it takes the existing
        DID, a DID document, plus optional DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to update a DID. The output is a state object that represents the current
        state of the DID update process.</p> <p>See the <a href="https://identity.foundation/did-registration/#update">DID
        Registration</a> specification for additional details.</p>
      operationId: update
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        '200':
          description: The request was successful, and the DID may or may not be fully
            updated yet, as indicated by the "didState.state" and "jobId" output fields.
            Additional state information plus metadata are available in the response
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateState'
  /universal-registrar/deactivate:
    post:
      summary: Deactivate a DID
      description: <p>This endpoint deactivates a DID. As input it takes the existing
        DID, plus optional DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to deactivate a DID. The output is a state object that represents the
        current state of the DID deactivation process.</p> <p>See the <a href="https://identity.foundation/did-registration/#deactivate">DID
        Registration</a> specification for additional details.</p>
      operationId: deactivate
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateRequest'
      responses:
        '200':
          description: The request was successful, and the DID may or may not be fully
            deactivated yet, as indicated by the "didState.state" and "jobId" output
            fields. Additional state information plus metadata are available in the
            response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateState'
  /universal-registrar/execute:
    post:
      summary: Execute a DID operation
      description: <p>This endpoint executes an operation that uses the DID but is
        not related to the standard create/update/deactivate operations. As input
        it takes the existing DID, an operation, operation data, plus optional DID
        registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to execute the operation. The output is a state object that represents
        the current state of the execution process, and an operation result.</p> <p>See
        the <a href="https://identity.foundation/did-registration/#execute">DID Registration</a>
        specification for additional details.</p>
      operationId: execute
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteRequest'
      responses:
        '200':
          description: The request was successful, and the operation may or may not
            be fully executed yet, as indicated by the "didState.state" and "jobId"
            output fields. Additional state information plus metadata are available
            in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteState'
  /universal-registrar/createResource:
    post:
      summary: Create a DID URL and associated resource
      description: <p>This endpoint creates a DID URL and associated resource. As
        input it takes an existing DID, a relative DID URL, a resource, plus optional
        DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to create the DID URL. The output is a state object that represents
        the current state of the DID URL creation process.</p> <p>See the <a href="https://identity.foundation/did-registration/#createResource">DID
        Registration</a> specification for additional details.</p>
      operationId: createResource
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '200':
          description: The request was successful, but the DID URL may not be fully
            created yet, as indicated by the "didState.state" and "jobId" output fields.
            Additional state information plus metadata are available in the response
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceState'
        '201':
          description: The DID URL has been successfully created, as indicated by
            the "didState.state" output field. Additional state information (including
            the created DID URL) plus metadata are available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResourceState'
  /universal-registrar/updateResource:
    post:
      summary: Update a DID URL and associated resource
      description: <p>This endpoint updates a DID URL and associated resource. As
        input it takes an existing DID, a relative DID URL, a resource, plus optional
        DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to update the DID URL. The output is a state object that represents
        the current state of the DID URL update process.</p> <p>See the <a href="https://identity.foundation/did-registration/#updateResource">DID
        Registration</a> specification for additional details.</p>
      operationId: updateResource
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceRequest'
      responses:
        '200':
          description: The request was successful, and the DID URL may or may not
            be fully updated yet, as indicated by the "didState.state" and "jobId"
            output fields. Additional state information plus metadata are available
            in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourceState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourceState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResourceState'
  /universal-registrar/deactivateResource:
    post:
      summary: Deactivate a DID URL and associated resource
      description: <p>This endpoint deactivates a DID URL and associated resource.
        As input it takes an existing DID, a relative DID URL, a resource, plus optional
        DID registration <a href="https://identity.foundation/did-registration/#options">options</a>
        and <a href="https://identity.foundation/did-registration/#secret">secrets</a>
        needed to deactivate the DID URL. The output is a state object that represents
        the current state of the DID URL deactivation process.</p> <p>See the <a href="https://identity.foundation/did-registration/#deactivateResource">DID
        Registration</a> specification for additional details.</p>
      operationId: deactivateResource
      tags:
        - Universal Registrar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateResourceRequest'
      responses:
        '200':
          description: The request was successful, and the DID URL may or may not
            be fully deactivated yet, as indicated by the "didState.state" and "jobId"
            output fields. Additional state information plus metadata are available
            in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateResourceState'
        '400':
          description: A problem with the input fields has occurred. Additional state
            information plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateResourceState'
        '500':
          description: An internal error has occurred. Additional state information
            plus metadata may be available in the response body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeactivateResourceState'
  /universal-registrar/properties:
    get:
      summary: Return a map of configuration properties
      description: <p>This endpoint returns a map of the configuration properties
        of the DID Registrar, including of its drivers.</p>
      operationId: universalRegistrarGetProperties
      tags:
        - Universal Registrar
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: object
                description: A map of properties.
                example:
                  indy:
                    libIndyPath: /lib
                    poolConfigs: '...'
  /universal-registrar/methods:
    get:
      summary: Return a list of supported DID methods
      description: <p>This endpoint returns a list of DID methods supported by the
        DID Registrar.</p>
      operationId: universalRegistrarGetMethods
      tags:
        - Universal Registrar
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: array
                items:
                  type: string
                description: The list of supported DID methods.
                example:
                  - indy
                  - ebsi
                  - ion
                  - cheqd
                  - key
  /universal-registrar/traits:
    get:
      summary: Return a map of DID traits
      description: <p>This endpoint returns a map of the DID traits of the DID methods
        supported by the DID Registrar.</p>
      operationId: universalRegistrarGetTraits
      tags:
        - Universal Registrar
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: object
                description: A map of DID traits.
                example:
                  indy:
                    updatable: true
                    deactivatable: true
                    enumerable: true
                    historyAvailable: true
                    humanReadable: false
  /wallet-service/keys:
    get:
      summary: Get key(s)
      description: <p>This endpoint returns a list of public keys from the Wallet
        Service that match the input parameters.</p> <p>Note that there may be multiple
        keys for a given DID.</p>
      operationId: getKeys
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: query
          name: controller
          schema:
            type: string
            format: uri
          description: The controller of the key(s) to retrieve.
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        - in: query
          name: url
          schema:
            type: string
            format: uri
          description: The URL of the key(s) to retrieve.
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#keys-1
        - in: query
          name: type
          schema:
            type: string
          description: The type of the key(s) to retrieve.
          example: Ed25519
        - in: query
          name: purpose
          schema:
            type: string
          description: The purpose of the key(s) to retrieve.
          example: authentication
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit (total number) of keys to retrieve.
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Key'
                description: The list of key(s).
                example:
                  - id: f25bed83-570c-45a4-b2fa-07a0df2a25d5
                    timestamp: 1633531154167
                    controller: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
                    url: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz#z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
                    type: Ed25519
                    purpose:
                      - authentication
                      - assertionMethod
                      - capabilityDelegation
                      - capabilityInvocation
                    key:
                      kty: OKP
                      crv: Ed25519
                      x: KUnc6ztOeq1mR4UHxY2vmtJQZDk_VikOBTyPvrAu-c8
                    keyMetadata: null
                  - id: 618acb93-0c7d-4a0e-bb78-32745e436404
                    timestamp: 1633531154259
                    controller: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
                    url: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz#z6LStgSrgnA1qWUdiEBcMEduv29jX1n8zmbgw1hcaewouhQV
                    type: X25519
                    purpose:
                      - keyAgreement
                    key:
                      kty: OKP
                      crv: X25519
                      x: _Khr2RW7e-QAHqVx5RjDSshHomTjNDBCLeaJSQklgHI
                    keyMetadata: null
          description: The request was successful, and the list of public key(s) has
            been retrieved.
        '400':
          description: A problem with the input fields has occurred.
        '500':
          description: An internal error has occurred.
    post:
      summary: Import key
      description: <p>This endpoint imports a new private/public key in JWK into the
        Wallet Service.</p><p>Note that when a DID is created using the Universal
        Registrar, its keys are automatically imported into the Wallet Service.</p>
      operationId: importKey
      tags:
        - Wallet Service - DIDs and Keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: The new key to import.
      responses:
        '201':
          description: The request was successful, and the new key has been imported.
        '400':
          description: A problem with the input fields has occurred.
        '409':
          description: This key already exists in the Wallet Service.
        '500':
          description: An internal error has occurred.
  /wallet-service/keys/{id}:
    get:
      summary: Get key
      description: <p>This endpoint returns a private/public key with a given internal
        identifier from the Wallet Service.</p>
      operationId: getKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to retrieve.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
        - in: query
          name: exportPrivate
          required: false
          schema:
            type: boolean
          description: An optional flag to indicate whether private key data should
            be included in the response.
          example: true
      responses:
        '200':
          description: The request was successful, and the key has been retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
    delete:
      summary: Delete key
      description: <p>This endpoint deletes a private/public key from the Wallet Service.</p>
        <p>Note that deleting a key from the Wallet Service does not deactivate the
        corresponding DID. This should be done before deleting keys.</p> <p>Also note
        that deleting a key may render a DID uncontrollable, unless the key was exported
        before.</a>
      operationId: deleteKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to delete.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
      responses:
        '204':
          description: The request was successful, and the key has been deleted.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
    put:
      summary: Update key
      description: <p>This endpoint updates an existing private/public key in the
        Wallet Service.</p>
      operationId: updateKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to update.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: The updated key.
      responses:
        '200':
          description: The request was successful, and the key has been updated.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/keys/sign:
    post:
      summary: Sign with key
      description: <p>This endpoint signs an arbitrary unsigned payload using a private
        key from the Wallet Service.</p>
      operationId: signWithKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to use for signing.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
        - in: query
          name: url
          schema:
            type: string
            format: uri
          description: The URL of the key to use for signing.
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#keys-1
        - in: query
          name: algorithm
          schema:
            type: string
          description: The cryptographic algorithm (JWA) to use for signing.
          example: EdDSA
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
        description: The payload to sign.
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
          description: The request was successful, and the payload has been signed.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/keys/verify:
    post:
      summary: Verify with key
      description: <p>This endpoint verifies an arbitrary signed payload using a public
        key from the Wallet Service.</p>
      operationId: verifyWithKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to use for verifying.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
        - in: query
          name: url
          schema:
            type: string
            format: uri
          description: The URL of the key to use for verifying.
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#keys-1
        - in: query
          name: algorithm
          schema:
            type: string
          description: The cryptographic algorithm (JWA) to use for verifying.
          example: EdDSA
        - in: query
          name: signature
          schema:
            type: string
          description: The hex-encoded signature to verify.
          example: 00112233445566778899aabbccddeeff
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
        description: The payload to verify.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
              example:
                verified: true
          description: The request was successful, and the payload has been verified.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/keys/decrypt:
    post:
      summary: Decrypt with key
      description: <p>This endpoint decrypts an arbitrary encrypted payload using
        a private key from the Wallet Service.</p>
      operationId: decryptWithKey
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
          description: The internal identifier of the key to use for decrypting.
          example: 386fd0bf-6bf2-4063-a1b0-42927caf1886
        - in: query
          name: url
          schema:
            type: string
            format: uri
          description: The URL of the key to use for decrypting.
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#keys-1
        - in: query
          name: algorithm
          schema:
            type: string
          description: The cryptographic algorithm (JWA) to use for decrypting.
          example: ECDH-ES
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: byte
        description: The payload to decrypt.
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
          description: The request was successful, and the payload has been decrypted.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No key was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/credentials:
    get:
      summary: Get credentials(s)
      operationId: getCredentials
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: query
          name: subject
          schema:
            type: string
            format: uri
          description: The subject of the credential(s) to retrieve.
        - in: query
          name: issuer
          schema:
            type: string
            format: uri
          description: The issuer of the credential(s) to retrieve.
        - in: query
          name: type
          schema:
            type: string
          description: The type of the credential(s) to retrieve.
          example: Ed25519
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit (total number) of keys to retrieve.
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
                description: The list of credential(s).
          description: The request was successful, and the list of credential(s) has
            been retrieved.
        '400':
          description: A problem with the input fields has occurred.
        '500':
          description: An internal error has occurred.
    post:
      summary: Import credential
      operationId: importCredential
      tags:
        - Wallet Service - Credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        description: The new credential to import.
      responses:
        '201':
          description: The request was successful, and the new credential has been
            imported.
        '400':
          description: A problem with the input fields has occurred.
        '409':
          description: This credential already exists in the Wallet Service.
        '500':
          description: An internal error has occurred.
  /wallet-service/credentials/{id}:
    get:
      summary: Get credential
      description: <p>This endpoint returns a credential with a given internal identifier
        from the Wallet Service.</p>
      operationId: getCredential
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the credential to retrieve.
          example: 1bba3d1c-1bda-4827-add6-6d5782658c3a
      responses:
        '200':
          description: The request was successful, and the credential has been retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No credential was found with the given identifier.
        '500':
          description: An internal error has occurred.
    delete:
      summary: Delete credential
      operationId: deleteCredential
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the credential to delete.
          example: 1bba3d1c-1bda-4827-add6-6d5782658c3a
      responses:
        '204':
          description: The request was successful, and the credential has been deleted.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No credential was found with the given identifier.
        '500':
          description: An internal error has occurred.
    put:
      summary: Update credential
      description: <p>This endpoint updates an existing credential in the Wallet Service.</p>
      operationId: updateCredential
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: The internal identifier of the credential to update.
          example: 1bba3d1c-1bda-4827-add6-6d5782658c3a
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
        description: The updated credential.
      responses:
        '200':
          description: The request was successful, and the credential has been updated.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No credential was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/credentials/search:
    get:
      summary: Find credentials by path/value
      operationId: findInCredentials
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
        - in: query
          name: subject
          schema:
            type: string
        - in: query
          name: issuer
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: Credential(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
                description: The credential(s).
        '400':
          description: invalid input!
        '404':
          description: Credential(s) not found!
        '500':
          description: error!
  /wallet-service/controllers:
    get:
      summary: Get controller(s)
      description: <p>This endpoint returns a list of controllers from the wallet
        that match the input parameters.</p>
      operationId: getControllers
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: The type of the key(s) to retrieve.
          example: Ed25519
        - in: query
          name: purpose
          schema:
            type: string
          description: The purpose of the key(s) to retrieve.
          example: authentication
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit (total number) of controllers to retrieve.
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: The list of controller(s).
                example:
                  - did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
                  - did:key:z6MkiD3mSCJZFefR9GXY3bwa6cdxkLyUJ6a7HRFnU3YPNDp2
                  - did:indy:sovrin:danube:C7EGTrTaUruV98HPoEFP9n
                  - did:v1:test:nym:z6MknvTVgWvRUHt5wcFQzRSbTReN95cKwo3EAbd1vEmUzUtt
          description: The request was successful, and the list of controller(s) has
            been retrieved.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No controllers were found that match the input parameters.
        '500':
          description: An internal error has occurred.
  /wallet-service/controllers/{controller}:
    delete:
      summary: Delete keys by controller
      description: <p>This endpoint deletes all private/public keys from the Wallet
        Service related to the given controller.</p>
      operationId: deleteKeysByController
      tags:
        - Wallet Service - DIDs and Keys
      parameters:
        - in: path
          name: controller
          required: true
          schema:
            type: string
            format: uri
          description: The controller of the key(s) to delete.
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
      responses:
        '204':
          description: The request was successful, and the keys have been deleted.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No controller was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /wallet-service/subjects:
    get:
      summary: Get subjects(s)
      description: <p>This endpoint returns a list of subjects from the wallet that
        match the input parameters.</p>
      operationId: getSubjects
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: query
          name: issuer
          schema:
            type: string
            format: uri
          description: The issuer of the credential(s) to retrieve.
        - in: query
          name: type
          schema:
            type: string
          description: The type of the credential(s) to retrieve.
          example: Ed25519
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit (total number) of subjects to retrieve.
          example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: The list of subjects(s).
                example:
                  - did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
          description: The request was successful, and the list of subject(s) has
            been retrieved.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No subjects were found that match the input parameters.
        '500':
          description: An internal error has occurred.
  /wallet-service/subjects/{subject}:
    delete:
      summary: Delete credentials by subject
      description: <p>This endpoint deletes all credentials from the Wallet Service
        related to the given subject.</p>
      operationId: deleteCredentialsBySubject
      tags:
        - Wallet Service - Credentials
      parameters:
        - in: path
          name: subject
          required: true
          schema:
            type: string
            format: uri
          description: The subjects of the credential(s) to delete.
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
      responses:
        '204':
          description: The request was successful, and the credentials have been deleted.
        '400':
          description: A problem with the input fields has occurred.
        '404':
          description: No subject was found with the given identifier.
        '500':
          description: An internal error has occurred.
  /version-service/didrecords:
    get:
      summary: Get DID Record(s)
      description: This endpoint gets matching DID Records. As input, it takes multiple
        optional parameters. The output is an array of DID Records if there are matches,
        empty otherwise. <p> A DID Record represents a DID resolution at a specific
        point in time, with additional metadata attached to it. Results are sorted
        by versionTime in descending order. **limit** and **offset** parameters can
        be used in possible combinations unless stated otherwise.
      operationId: getDidRecords
      tags:
        - Version Service
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
            example: 8ff29f08-ede2-426d-b127-b95c3fa43192
          description: Unique id of the DID Record to get. When this parameter is
            set, no other parameter is allowed.
        - in: query
          name: did
          schema:
            type: string
            format: did
            example: did:ion:test:EiDnCmF6bjRF4GEB49PwGi3_AuOmXXBsSV4vor1fkNQc2w
          description: A DID to get its DID Records. This parameter can be combined
            with **versionTime** to get DID Records up until that time or with **versionTimeFrom**
            and **versionTimeTo** to get DID Records in a given interval.
        - in: query
          name: method
          schema:
            type: string
            example: jolo
          description: A DID method to get its records. This parameter can be combined
            with **versionTime** to get DID Records of the given method up to (inclusive)
            the given time.
        - in: query
          name: versionId
          schema:
            type: string
            example: 22
          description: Gets the DID Record of given **did** with given versionId.
            Usage only allowed with combination of the **did** field. No other parameters
            are allowed.
        - in: query
          name: versionTime
          schema:
            type: integer
            format: int64
            example: 1610582180000
          description: Time in milliseconds. When used alone, this gets the records
            up to (inclusive) given time.
        - in: query
          name: versionTimeFrom
          schema:
            type: integer
            format: int64
          description: Epoch time in milliseconds. **versionTime** must be null and
            **versionTimeTo** must be given to use time-range function.
          example: 1610582180000
        - in: query
          name: versionTimeTo
          schema:
            type: integer
            format: int64
            example: 1610582180000
          description: Epoch time in milliseconds. **versionTime** must be null and
            **versionTimeFrom** must be given to use time-range function.
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Record(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidRecord'
                description: The DID Record(s).
        '400':
          description: invalid input!
        '404':
          description: DID Record(s) not found!
        '500':
          description: error!
  /version-service/didrecords/findInIdentifier:
    get:
      summary: Find DID Records(s) by identifier
      description: This endpoint searches the given term in DID Records' identifiers,
        i.e., DIDs.
      operationId: findInIdentifier
      tags:
        - Version Service
      parameters:
        - in: query
          name: term
          required: true
          schema:
            type: string
          example: WRfXPg8dantKVubE3HX8pw
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Record(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidRecord'
                description: The DID Record(s).
        '400':
          description: invalid input!
        '404':
          description: DID Record(s) not found!
        '500':
          description: error!
  /version-service/didrecords/count:
    get:
      summary: Count DID Records by method
      operationId: countByMethod
      tags:
        - Version Service
      parameters:
        - in: query
          name: method
          schema:
            type: string
      responses:
        '200':
          description: Number of DID Record(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The matching DID Record count.
        '500':
          description: error!
  /version-service/diddocuments:
    get:
      summary: Get DID Document(s)
      operationId: getDidDocuments
      tags:
        - Version Service
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
        - in: query
          name: did
          schema:
            type: string
            format: did
        - in: query
          name: method
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Document(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidDocument1'
                description: The DID Document(s).
        '400':
          description: invalid input!
        '404':
          description: DID Document(s) not found!
        '500':
          description: error!
  /version-service/diddocuments/search:
    get:
      summary: Find DID Documents by path/value
      operationId: findInDidDocuments
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
        - in: query
          name: method
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Document(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidDocument1'
                description: The DID Document(s).
        '400':
          description: invalid input!
        '404':
          description: DID Document(s) not found!
        '500':
          description: error!
  /version-service/diddocuments/count:
    get:
      summary: Count DID Documents by path/value
      operationId: countWithinDidDocuments
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
      responses:
        '200':
          description: Number of DID Document(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The matching DID Document count.
        '400':
          description: invalid input!
        '500':
          description: error!
  /version-service/diddocuments/metadata/search:
    get:
      summary: Find DID Document by metadata path/value
      operationId: findInDidDocumentMetadata
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
        - in: query
          name: method
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Document(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidDocument1'
                description: The DID Document(s).
        '400':
          description: invalid input!
        '404':
          description: DID Document(s) not found!
        '500':
          description: error!
  /version-service/diddocuments/metadata/count:
    get:
      summary: Count DID Document by metadata path/value
      operationId: countWithinDidDocumentMetadata
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
      responses:
        '200':
          description: Number of DID Document(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The matching DID Document count.
        '400':
          description: invalid input!
        '500':
          description: error!
  /version-service/didversions:
    get:
      summary: Get DID Version(s)
      operationId: getDidVersions
      tags:
        - Version Service
      parameters:
        - in: query
          name: id
          schema:
            type: string
            format: uuid
        - in: query
          name: did
          schema:
            type: string
            format: did
        - in: query
          name: method
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Version(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidVersion'
                description: The DID Version(s).
        '400':
          description: invalid input!
        '404':
          description: DID Version(s) not found!
        '500':
          description: error!
  /version-service/didversions/search:
    get:
      summary: Find DID Version(s) by metadata path/value
      operationId: findInDidVersionMetadata
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
        - in: query
          name: method
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the
            result set.
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of items to return.
      responses:
        '200':
          description: DID Version(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DidVersion'
                description: The DID Version(s).
        '400':
          description: invalid input!
        '404':
          description: DID Version(s) not found!
        '500':
          description: error!
  /version-service/didversions/count:
    get:
      summary: Count DID Version(s) by metadata path/value
      operationId: countWithinDidVersionMetadata
      tags:
        - Version Service
      parameters:
        - in: query
          name: path
          schema:
            type: array
            items:
              type: string
        - in: query
          name: value
          schema:
            type: object
      responses:
        '200':
          description: Number of DID Version(s) successfully retrieved!
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: The matching DID Version count.
        '400':
          description: invalid input!
        '500':
          description: error!
  /version-service/didrecords/methods:
    get:
      summary: Return a list of supported DID methods
      description: <p>This endpoint returns a list of DID methods supported by the
        Version Service.</p>
      operationId: methods
      tags:
        - Version Service
      responses:
        '200':
          description: Success.
          content:
            application/did+json:
              schema:
                type: array
                items:
                  type: string
                description: The list of supported DID methods.
                example:
                  - btcr
                  - indy
                  - v1
                  - key
        '500':
          description: error!
  /universal-issuer/credentials/issue:
    post:
      tags:
        - Universal Issuer
      summary: Issue a Verifiable Credential
      operationId: issueCredential
      description: This endpoint issues a Verifiable Credential and returns it in
        the response body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCredentialRequest'
        description: Parameters for issuing the Verifiable Credential.
      responses:
        '201':
          description: Verifiable Credential successfully issued!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCredentialResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
  /universal-issuer/credentials/status:
    post:
      tags:
        - Universal Issuer
      summary: Update the status of a Verifiable Credential
      operationId: updateCredentialStatus
      description: This endpoint updates the status of a Verifiable Credential that
        has been issued.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialStatus'
        description: Parameters for updating the status of the issued Verifiable Credential.
      responses:
        '200':
          description: Verifiable Credential status successfully updated
        '400':
          description: Bad Request
        '404':
          description: Verifiable Credential not found
        '500':
          description: Internal Server Error
  /universal-verifier/verify:
    post:
      tags:
        - Universal Verifier
      summary: Verify a Verifiable Credential or Verifiable Presentation
      description: This endpoint verifies a Verifiable Credential or Verifiable Presentation
        and returns a verification result in the response body.
      operationId: verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
        description: Parameters for verifying a Verifiable Credential or Verifiable
          Presentation.
      responses:
        '200':
          description: Verifiable Credential or Verifiable Presentation successfully
            verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
  /universal-verifier/credentials/verify:
    post:
      tags:
        - Universal Verifier
      summary: Verify a Verifiable Credential
      description: This endpoint verifies a Verifiable Credential and returns a verification
        result in the response body.
      operationId: verifyCredential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCredentialRequest'
        description: Parameters for verifying a Verifiable Credential.
      responses:
        '200':
          description: Verifiable Credential successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyCredentialResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
  /universal-verifier/presentations/verify:
    post:
      tags:
        - Universal Verifier
      summary: Verify a Verifiable Presentation
      description: This endpoint verifies a Verifiable Presentation and returns a
        verificationResult in the response body. A simple Presentation without proof
        can also be provided.
      operationId: verifyPresentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyPresentationRequest'
        description: Parameters for verifying a Verifiable Presentation.
      responses:
        '200':
          description: Verifiable Presentation successfully verified!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyPresentationResponse'
        '400':
          description: Invalid or malformed input
        '413':
          description: Payload too large
        '429':
          description: Request rate limit exceeded.
        '500':
          description: Internal Server Error
  /revocation-service/revocation/revoke:
    post:
      tags:
        - Revocation Service
      summary: Revoke a credential.
      operationId: revoke
      parameters:
        - in: query
          required: true
          name: credentialFormat
          schema:
            type: string
          description: A string that identifies the format of the credential; this
            is used to parse the credential and to look up the type of credential
            status mechanism, which in turn will determine which driver will be used.
          example: jsonld
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeRequest'
      responses:
        '200':
          description: successfully revoked!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeResponse'
        '400':
          description: invalid input!
        '500':
          description: error!
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: apiKey
  schemas:
    ResolutionOptions:
      description: The DID resolution options. See https://www.w3.org/TR/did-resolution/#did-resolution-options
      type: object
      properties:
        expandRelativeUrls:
          type: boolean
        versionId:
          type: string
        versionTime:
          type: string
          format: date-time
      additionalProperties: {}
    DereferencingOptions:
      description: The DID URL dereferencing options. See https://www.w3.org/TR/did-resolution/#did-url-dereferencing-options
      type: object
      properties:
        verificationRelationship:
          type: string
      additionalProperties: {}
    ResolutionResult:
      description: The DID resolution result.
      type: object
      properties:
        didDocument:
          type: object
        didResolutionMetadata:
          $ref: '#/components/schemas/DidResolutionMetadata'
        didDocumentMetadata:
          $ref: '#/components/schemas/DidDocumentMetadata'
    DidResolutionMetadata:
      type: object
      properties:
        contentType:
          type: string
        error:
          $ref: '#/components/schemas/RFC9457ProblemDetails'
      additionalProperties: {}
    DidDocumentMetadata:
      type: object
      properties:
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        deactivated:
          type: string
        nextUpdate:
          type: string
          format: date-time
        versionId:
          type: string
        nextVersionId:
          type: string
        equivalentId:
          type: array
          items:
            type: string
        canonicalId:
          type: string
      additionalProperties: {}
    DereferencingResult:
      description: The DID URL dereferencing result.
      type: object
      properties:
        content:
          type: object
        dereferencingMetadata:
          $ref: '#/components/schemas/DereferencingMetadata'
        contentMetadata:
          $ref: '#/components/schemas/ContentMetadata'
    DereferencingMetadata:
      type: object
      properties:
        contentType:
          type: string
        error:
          $ref: '#/components/schemas/RFC9457ProblemDetails'
      additionalProperties: {}
    ContentMetadata:
      type: object
      additionalProperties: {}
    RFC9457ProblemDetails:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
        status:
          type: integer
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
      additionalProperties: {}
    RegistrarRequest:
      description: Input fields for a DID operation.
      type: object
      properties:
        jobId:
          description: This input field is used to keep track of an ongoing DID operation
            process. See <a href="https://identity.foundation/did-registration/#jobid">https://identity.foundation/did-registration/#jobid</a>.
          type: string
          example: 6d85bcd0-2ea3-4288-ab00-15afadd8a156
        options:
          $ref: '#/components/schemas/RequestOptions'
        secret:
          $ref: '#/components/schemas/RequestSecret'
    RequestOptions:
      description: This input field contains an object with various options for the
        DID operation, such as the network where the DID operation should be executed.
        See <a href="https://identity.foundation/did-registration/#options">https://identity.foundation/did-registration/#options</a>.
      type: object
      properties:
        clientSecretMode:
          $ref: '#/components/schemas/Boolean'
        storeSecrets:
          $ref: '#/components/schemas/Boolean'
        returnSecrets:
          $ref: '#/components/schemas/Boolean'
        requestVerificationMethod:
          $ref: '#/components/schemas/RequestOptionsRequestVerificationMethod'
      additionalProperties: {}
      example:
        network: testnet
    RequestOptionsRequestVerificationMethod:
      type: array
      items:
        $ref: '#/components/schemas/VerificationMethodTemplate'
    CreateRequest:
      description: Input fields for a DID create operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          properties:
            didDocument:
              description: This input field contains the DID document to be used for
                the DID create operation. See <a href="https://identity.foundation/did-registration/#diddocument">https://identity.foundation/did-registration/#diddocument</a>.
              $ref: '#/components/schemas/DidDocument'
    UpdateRequest:
      description: Input fields for a DID update operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID update operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
            didDocumentOperation:
              description: This input field indicates which update operation(s) should
                be applied to a DID’s associated DID document. See <a href="https://identity.foundation/did-registration/#diddocumentoperation">https://identity.foundation/did-registration/#diddocumentoperation</a>.
              type: array
              items:
                type: string
              example:
                - setDidDocument
            didDocument:
              description: This input field contains either a complete DID document,
                or an incremental change (diff) to a DID document. See <a href="https://identity.foundation/did-registration/#diddocument">https://identity.foundation/did-registration/#diddocument</a>.
              type: array
              items:
                $ref: '#/components/schemas/DidDocument'
    DeactivateRequest:
      description: Input fields for a DID deactivate operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID deactivation operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
    ExecuteRequest:
      description: Input fields for a DID execute operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID execute operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
            operation:
              description: This input field indicates which operation should be executed.
                See <a href="https://identity.foundation/did-registration/#operation">https://identity.foundation/did-registration/#operation</a>.
              type: array
              items:
                type: string
              example:
                - executeMyOperation
            operationData:
              description: This input field contains additional data. See <a href="https://identity.foundation/did-registration/#operationdata">https://identity.foundation/did-registration/#operationdata</a>.
              type: array
              items:
                type: object
              example:
                - myOperationData: myOperationValue
    CreateResourceRequest:
      description: Input fields for a DID URL create operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
            - relativeDidUrl
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID URL create operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
            relativeDidUrl:
              description: This input field indicates a relative DID URL that is the
                target of the DID URL create operation.
              type: string
              example: /resources/123
            content:
              description: This input field contains Base64-encoded data that is the
                content of the resource associated with the DID URL.
              type: string
              example: SGVsbG8gV29ybGQ=
    UpdateResourceRequest:
      description: Input fields for a DID URL update operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
            - relativeDidUrl
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID URL update operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
            relativeDidUrl:
              description: This input field indicates a relative DID URL that is the
                target of the DID URL update operation.
              type: string
              example: /resources/123
            contentOperation:
              description: This input field indicates which update operation(s) should
                be applied to the content of a DID URL’s associated resource. See
                <a href="https://identity.foundation/did-registration/#diddocumentoperation">https://identity.foundation/did-registration/#resourceoperation</a>.
              type: array
              items:
                type: string
              example:
                - setContent
            content:
              description: This input field contains Base64-encoded data that is the
                content of the resource associated with the DID URL.
              type: array
              items:
                type: string
              example:
                - SGVsbG8gV29ybGQ=
    DeactivateResourceRequest:
      description: Input fields for a DID URL deactivate operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarRequest'
        - type: object
          required:
            - did
            - relativeDidUrl
          properties:
            did:
              description: This input field indicates the DID that is the target of
                the DID URL deactivate operation.
              type: string
              example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
            relativeDidUrl:
              description: This input field indicates a relative DID URL that is the
                target of the DID URL deactivate operation.
              type: string
              example: /resources/123
    DidDocument:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/String'
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        controller:
          $ref: '#/components/schemas/DidDocumentController'
          example:
            - did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        verificationMethod:
          $ref: '#/components/schemas/DidDocumentVerificationMethod'
        service:
          $ref: '#/components/schemas/DidDocumentService'
      additionalProperties: {}
    DidDocumentController:
      type: array
      items:
        type: string
    DidDocumentVerificationMethod:
      type: array
      items:
        type: object
        additionalProperties: {}
    DidDocumentService:
      type: array
      items:
        type: object
        additionalProperties: {}
    RegistrarState:
      description: The state after a DID operation.
      type: object
      required:
        - didState
      properties:
        jobId:
          type: string
          example: 6d85bcd0-2ea3-4288-ab00-15afadd8a156
        didState:
          $ref: '#/components/schemas/DidState'
        didRegistrationMetadata:
          type: object
          additionalProperties: {}
        didDocumentMetadata:
          type: object
          additionalProperties: {}
    RegistrarResourceState:
      description: The state after a DID URL operation.
      type: object
      required:
        - didUrlState
      properties:
        jobId:
          type: string
          example: 6d85bcd0-2ea3-4288-ab00-15afadd8a156
        didUrlState:
          $ref: '#/components/schemas/DidUrlState'
        didRegistrationMetadata:
          type: object
          additionalProperties: {}
        contentMetadata:
          type: object
          additionalProperties: {}
    CreateState:
      description: The state after a DID create operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarState'
        - type: object
    UpdateState:
      description: The state after a DID update operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarState'
        - type: object
    DeactivateState:
      description: The state after a DID deactivate operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarState'
        - type: object
    ExecuteState:
      description: The state after a DID execute operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarState'
        - type: object
          properties:
            operationResult:
              description: This output field contains the result of the operation.
                See <a href="https://identity.foundation/did-registration/#operationdata">https://identity.foundation/did-registration/#operationdata</a>.
              type: array
              items:
                type: object
                example:
                  myOperationData: myOperationValue
    CreateResourceState:
      description: The state after a DID URL create operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarResourceState'
        - type: object
    UpdateResourceState:
      description: The state after a DID URL update operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarResourceState'
        - type: object
    DeactivateResourceState:
      description: The state after a DID URL deactivate operation.
      allOf:
        - $ref: '#/components/schemas/RegistrarResourceState'
        - type: object
    DidState:
      description: The current state of a DID.
      type: object
      required:
        - state
      discriminator:
        propertyName: state
        mapping:
          finished: '#/components/schemas/DidStateFinished'
          failed: '#/components/schemas/DidStateFailed'
          action: '#/components/schemas/DidStateAction'
          wait: '#/components/schemas/DidStateWait'
      properties:
        state:
          $ref: '#/components/schemas/String'
          example: finished
        did:
          $ref: '#/components/schemas/String'
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        secret:
          $ref: '#/components/schemas/DidStateSecret'
        didDocument:
          $ref: '#/components/schemas/DidDocument'
      additionalProperties: {}
    DidUrlState:
      description: The current state of a DID URL and associated resource.
      type: object
      required:
        - state
      discriminator:
        propertyName: state
        mapping:
          finished: '#/components/schemas/DidUrlStateFinished'
          failed: '#/components/schemas/DidUrlStateFailed'
          action: '#/components/schemas/DidUrlStateAction'
          wait: '#/components/schemas/DidUrlStateWait'
      properties:
        state:
          $ref: '#/components/schemas/String'
          example: finished
        didUrl:
          $ref: '#/components/schemas/String'
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        secret:
          $ref: '#/components/schemas/DidStateSecret'
        content:
          $ref: '#/components/schemas/String'
      additionalProperties: {}
    DidStateFinished:
      allOf:
        - $ref: '#/components/schemas/DidState'
        - $ref: '#/components/schemas/StateFinished'
    DidStateFailed:
      allOf:
        - $ref: '#/components/schemas/DidState'
        - $ref: '#/components/schemas/StateFailed'
    DidStateAction:
      allOf:
        - $ref: '#/components/schemas/DidState'
        - $ref: '#/components/schemas/StateAction'
    DidStateWait:
      allOf:
        - $ref: '#/components/schemas/DidState'
        - $ref: '#/components/schemas/StateWait'
    DidUrlStateFinished:
      allOf:
        - $ref: '#/components/schemas/DidUrlState'
        - $ref: '#/components/schemas/StateFinished'
    DidUrlStateFailed:
      allOf:
        - $ref: '#/components/schemas/DidUrlState'
        - $ref: '#/components/schemas/StateFailed'
    DidUrlStateAction:
      allOf:
        - $ref: '#/components/schemas/DidUrlState'
        - $ref: '#/components/schemas/StateAction'
    DidUrlStateWait:
      allOf:
        - $ref: '#/components/schemas/DidUrlState'
        - $ref: '#/components/schemas/StateWait'
    StateFinished:
      description: This state indicates that the DID operation has been completed.
        See https://identity.foundation/did-registration/#didstatestatefinished.
      allOf:
        - type: object
    StateFailed:
      description: This state indicates that the DID operation has failed. See https://identity.foundation/did-registration/#didstatestatefailed.
      allOf:
        - type: object
          properties:
            error:
              $ref: '#/components/schemas/String'
            reason:
              $ref: '#/components/schemas/String'
    StateAction:
      description: This state indicates that the client needs to perform an action,
        before the DID operation can be continued. See https://identity.foundation/did-registration/#didstatestateaction.
      allOf:
        - type: object
          properties:
            action:
              $ref: '#/components/schemas/String'
            verificationMethodTemplate:
              $ref: '#/components/schemas/StateActionVerificationMethodTemplate'
            signingRequest:
              type:
                - object
                - null
              additionalProperties:
                $ref: '#/components/schemas/SigningRequest'
            decryptionRequest:
              type:
                - object
                - null
              additionalProperties:
                $ref: '#/components/schemas/DecryptionRequest'
    StateActionVerificationMethodTemplate:
      type: array
      items:
        $ref: '#/components/schemas/VerificationMethodTemplate'
    StateWait:
      description: This state indicates that the client needs to wait, before the
        DID operation can be continued. See https://identity.foundation/did-registration/#didstatestatewait.
      allOf:
        - type: object
          properties:
            wait:
              $ref: '#/components/schemas/String'
            waittime:
              $ref: '#/components/schemas/String'
    Secret:
      description: Secrets in requests and states.
      type: object
      properties:
        verificationMethod:
          $ref: '#/components/schemas/SecretVerificationMethod'
      additionalProperties: {}
      example:
        verificationMethod:
          - id: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw#key-1
            type: JsonWebKey2020
            privateKeyJwk:
              kty: OKP
              crv: Ed25519
              d: NzJXR3A3TmdGUjFPcWRpOHpsdDdqUVE0MzRYUjBjTlE
              x: jpIKKU2b77lNXKTNW2NGvw1GUMjU6v_l_tLJAH5uYz0
    SecretVerificationMethod:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/VerificationMethodPublicData'
          - $ref: '#/components/schemas/VerificationMethodPrivateData'
          - $ref: '#/components/schemas/SecretVerificationMethodVerificationMethodTemplate'
    SecretVerificationMethodVerificationMethodTemplate:
      type: array
      items:
        $ref: '#/components/schemas/VerificationMethodTemplate'
    RequestSecret:
      description: This input field contains an object with DID controller keys and
        other secrets needed for performing the DID operation. See https://identity.foundation/did-registration/#secret.
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          properties:
            signingResponse:
              type:
                - object
                - null
              additionalProperties:
                $ref: '#/components/schemas/SigningResponse'
            decryptionResponse:
              type:
                - object
                - null
              additionalProperties:
                $ref: '#/components/schemas/DecryptionResponse'
          example:
            seed: 72WGp7NgFR1Oqdi8zlt7jQQ434XR0cNQ
    DidStateSecret:
      description: This output field contains an object with DID controller keys and
        other secrets. See https://identity.foundation/did-registration/#didstatesecret.
      allOf:
        - $ref: '#/components/schemas/Secret'
        - type: object
          example:
            seed: 72WGp7NgFR1Oqdi8zlt7jQQ434XR0cNQ
    SigningRequest:
      description: A signing request, see https://identity.foundation/did-registration/#signing-request-set.
      type: object
      required:
        - serializedPayload
        - alg
      properties:
        payload:
          type: object
        serializedPayload:
          $ref: '#/components/schemas/String'
        kid:
          $ref: '#/components/schemas/String'
        alg:
          $ref: '#/components/schemas/String'
        purpose:
          $ref: '#/components/schemas/String'
      additionalProperties: {}
    SigningRequestSet:
      description: A signing request set, see https://identity.foundation/did-registration/#signing-request-set.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SigningRequest'
    SigningResponse:
      description: A signing response, see https://identity.foundation/did-registration/#signing-response-set.
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: '#/components/schemas/String'
        kid:
          $ref: '#/components/schemas/String'
        alg:
          $ref: '#/components/schemas/String'
        purpose:
          $ref: '#/components/schemas/String'
      additionalProperties: {}
    SigningResponseSet:
      description: A signing response set, see https://identity.foundation/did-registration/#signing-response-set.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SigningResponse'
    DecryptionRequest:
      description: A decryption request, see https://identity.foundation/did-registration/#decryption-request-set.
      type: object
      required:
        - encryptedPayload
        - enc
      properties:
        payload:
          $ref: '#/components/schemas/String'
        encryptedPayload:
          $ref: '#/components/schemas/String'
        kid:
          $ref: '#/components/schemas/String'
        enc:
          $ref: '#/components/schemas/String'
        purpose:
          $ref: '#/components/schemas/String'
      additionalProperties: {}
    DecryptionRequestSet:
      description: A decryption request set, see https://identity.foundation/did-registration/#decryption-request-set.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DecryptionRequest'
    DecryptionResponse:
      description: A decryption response, see https://identity.foundation/did-registration/#decryption-response-set.
      type: object
      required:
        - decryptedPayload
      properties:
        decryptedPayload:
          $ref: '#/components/schemas/String'
        kid:
          $ref: '#/components/schemas/String'
        enc:
          $ref: '#/components/schemas/String'
        purpose:
          $ref: '#/components/schemas/String'
      additionalProperties: {}
    DecryptionResponseSet:
      description: A decryption response set, see https://identity.foundation/did-registration/#decryption-response-set.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DecryptionResponse'
    VerificationMethodData:
      type: object
      required:
        - type
      properties:
        id:
          type: string
        type:
          type: string
        controller:
          type: string
        purpose:
          type: array
          items:
            type: string
    VerificationMethodPublicData:
      description: A verification method public data object, see https://identity.foundation/did-registration/#verification-method-public-data
      allOf:
        - $ref: '#/components/schemas/VerificationMethodData'
        - type: object
          properties:
            publicKeyJwk:
              type:
                - object
                - null
              additionalProperties: {}
            publicKeyMultibase:
              type: string
    VerificationMethodPrivateData:
      description: A verification method private data object, see https://identity.foundation/did-registration/#verification-method-private-data
      allOf:
        - $ref: '#/components/schemas/VerificationMethodData'
        - type: object
          properties:
            privateKeyJwk:
              type:
                - object
                - null
              additionalProperties: {}
            privateKeyMultibase:
              type: string
    VerificationMethodTemplate:
      description: A verification method template, see https://identity.foundation/did-registration/#verification-method-template
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        controller:
          type: string
        purpose:
          type: array
          items:
            type: string
        publicKeyJwk:
          type:
            - object
            - null
          additionalProperties: {}
    String:
      type: string
    Boolean:
      type: boolean
    Key:
      description: A key stored in the Wallet Service.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: f25bed83-570c-45a4-b2fa-07a0df2a25d5
        timestamp:
          type: integer
          format: int64
          example: 1633531154167
        controller:
          type: string
          format: uri
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
        url:
          type: string
          format: uri
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz#z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
        type:
          type: string
          example: Ed25519
        purpose:
          type: array
          items:
            type: string
          example:
            - authentication
            - assertionMethod
            - capabilityDelegation
            - capabilityInvocation
        key:
          type:
            - object
            - null
          example:
            kty: OKP
            crv: Ed25519
            x: KUnc6ztOeq1mR4UHxY2vmtJQZDk_VikOBTyPvrAu-c8
          additionalProperties: {}
        keyMetadata:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
    Credential:
      description: A credential stored in the Wallet Service.
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1bba3d1c-1bda-4827-add6-6d5782658c3a
        timestamp:
          type: integer
          format: int64
          example: 1633531154167
        subject:
          type: string
          format: uri
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
        issuer:
          type: string
          format: uri
          example: did:key:z6MkhES5w7ViszdQZBfKmzgFM8XVXy6DxVgBZzQCJdrcBuGz
        type:
          type: string
          example: PermanentResidentCredential
        credential:
          type:
            - object
            - null
          additionalProperties: {}
        credentialMetadata:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
        reference:
          type: string
          example: user-012345
    DidRecord:
      type: object
      required:
        - did
        - method
      properties:
        id:
          type: string
          format: uuid
          example: 278dad34-e30b-4159-9ac0-ff5ccc0fdd81
        timestamp:
          type: integer
          format: int64
          example: 1624014333778
          description: Record's epoch time in milliseconds
        did:
          type: string
          format: did
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        method:
          type: string
          example: indy
          description: DID Method name
        didDocument:
          $ref: '#/components/schemas/DidDocument1'
        didVersion:
          $ref: '#/components/schemas/DidVersion'
        didState:
          $ref: '#/components/schemas/DidState1'
    DidDocument1:
      type: object
      required:
        - documentContent
      properties:
        didRecordId:
          type: string
          format: uuid
          example: 8ff29f08-ede2-426d-b127-b95c3fa43192
        did:
          type: string
          format: did
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        documentContent:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
        documentMetadata:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
    DidVersion:
      type: object
      properties:
        didRecordId:
          type: string
          format: uuid
          example: 8ff29f08-ede2-426d-b127-b95c3fa43192
        did:
          type: string
          format: did
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        versionId:
          type: string
          example: 18
        versionTime:
          type: integer
          format: int64
          example: 1624014333778
          description: Version's epoch time in milliseconds
        versionMetadata:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
    DidState1:
      type: object
      required:
        - state
      properties:
        didRecordId:
          type: string
          format: uuid
          example: 8ff29f08-ede2-426d-b127-b95c3fa43192
        did:
          type: string
          format: did
          example: did:indy:sovrin:WRfXPg8dantKVubE3HX8pw
        state:
          type: string
          example: pending
        stateTime:
          type: integer
          format: int64
          example: 1624014333778
        stateMetadata:
          type:
            - object
            - null
          example: {}
          additionalProperties: {}
    UpdateCredentialStatus:
      type: object
      description: Request for updating the status of Verifiable Credential that has
        been issued.
      properties:
        credentialId:
          type: string
        credentialStatus:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              status:
                type: string
      example:
        credentialId: urn:uuid:45a44711-e457-4fa8-9b89-69fe0287c86a
        credentialStatus:
          - type: RevocationList2020Status
            status: '0'
    IssueCredentialOptions:
      type: object
      description: Options for the Verifiable Credential issuance process.
      properties:
        format:
          type: string
          description: 'The format of the Verifiable Credential to issue. Possible
            values: jsonld, jwt, jsonldjwt. Default value: jsonld.'
        credentialFormatOptions:
          type: object
          description: Additional implementation-specific options for the credential
            format.
        proofFormatOptions:
          type: object
          description: Additional implementation-specific options for the proof format.
        subjectReference:
          type: string
          description: An internal reference to a subject.
        returnMetadata:
          type: boolean
          description: 'Whether or not to return metadata in the response. Possible
            values: true, false. Default value: false.'
        importCredential:
          type: boolean
          description: Whether or not to import an issued Verifiable Credential into
            a wallet service.
        type:
          type: string
          description: 'The type of proof to generate for the Verifiable Credential.
            Possible values: Ed25519Signature2018, Ed25519Signature2018, JsonWebSignature2020,
            etc. If omitted, a default type of proof for the Issuer''s verification
            method will be used.'
        cryptosuite:
          type: string
        created:
          type: string
          description: The date and time of the proof (with a maximum accuracy in
            seconds). Default current system time.
        expires:
          type: string
        domain:
          type: string
          description: The intended domain of validity for the proof. For example
            website.example
        challenge:
          type: string
          description: A challenge provided by the requesting party of the proof.
            For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
        nonce:
          type: string
        verificationMethod:
          type: string
          description: The URI of the verification method to use for generating the
            proof. If omitted, a default verification method for the Issuer's DID
            will be used.
        proofPurpose:
          type: string
          description: 'The purpose of the proof. Default value: assertionMethod.'
        previousProof:
          type: string
        credentialStatus:
          type: object
          properties:
            type:
              type: string
              description: The method of Verifiable Credential status to generate
                for the Verifiable Credential.
            options:
              type: object
              description: Options for the Verifiable Credential status.
      additionalProperties: {}
      example:
        verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
        proofPurpose: assertionMethod
        created: '2020-04-02T18:48:36Z'
        domain: revocation.example
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
        credentialStatus:
          type: RevocationList2020Status
    IssueCredentialRequest:
      type: object
      properties:
        credential:
          type: object
        options:
          $ref: '#/components/schemas/IssueCredentialOptions'
    IssueCredentialResponse:
      type: object
    VerifyOptions:
      type: object
      description: Options for the Verifiable Credential verification process.
      properties:
        format:
          type: string
          description: 'The format of the Verifiable Credential to verify. Possible
            values: jsonld, jwt, jsonldjwt. Default value: jsonld.'
        credentialFormatOptions:
          type: object
          description: Additional implementation-specific options for the credential
            format.
        proofFormatOptions:
          type: object
          description: Additional implementation-specific options for the proof format.
        checks:
          type: array
          items:
            type: string
          description: A list of checks to be executed during the Verifiable Credential
            verification process.
        returnMetadata:
          type: boolean
          description: 'Whether or not to return metadata in the response. Possible
            values: true, false. Default value: false.'
        domain:
          type: string
          description: The intended domain of validity for the proof. For example
            website.example
        nonce:
          type: string
        challenge:
          type: string
          description: A challenge provided by the requesting party of the proof.
            For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
      additionalProperties: {}
      example:
        verificationMethod: did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN
        proofPurpose: assertionMethod
        created: '2020-04-02T18:48:36Z'
        domain: example.com
        challenge: d436f0c8-fbd9-4e48-bbb2-55fc5d0920a8
    VerificationResult:
      type: object
      example:
        checks:
          - proof
        warnings: []
        errors: []
    VerifyRequest:
      type: object
      properties:
        verifiableCredentialOrVerifiablePresentation:
          type: object
        options:
          $ref: '#/components/schemas/VerifyOptions'
    VerifyResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyCredentialRequest:
      type: object
      properties:
        verifiableCredential:
          type: object
        options:
          $ref: '#/components/schemas/VerifyOptions'
    VerifyCredentialResponse:
      $ref: '#/components/schemas/VerificationResult'
    VerifyPresentationRequest:
      type: object
      properties:
        verifiablePresentation:
          type: object
        options:
          $ref: '#/components/schemas/VerifyOptions'
    VerifyPresentationResponse:
      $ref: '#/components/schemas/VerificationResult'
    InitializeRequest:
      type: object
      required:
        - credential
      properties:
        credential:
          type: object
        options:
          type: object
    InitializeResponse:
      type: object
      required:
        - credential
      properties:
        credential:
          type: object
        metadata:
          type: object
    RevokeRequest:
      type: object
      required:
        - credential
      properties:
        credential:
          type: object
        options:
          type: object
    RevokeResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        metadata:
          type: object
    CheckRequest:
      type: object
      required:
        - credential
      properties:
        credential:
          type: object
        options:
          type: object
    CheckResponse:
      type: object
      required:
        - revoked
      properties:
        revoked:
          type: boolean
        metadata:
          type: object